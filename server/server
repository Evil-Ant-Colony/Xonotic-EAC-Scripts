#!/bin/bash

SERVERS=()
GAME_CMD="/opt/xonotic/all run dedicated"
GAME_PARAMS="-userdir ~/.xonotic -game data/pk3 -game data"
WRITABLE_VARS=(GAME_CMD GAME_PARAMS)
SELFDIR=$(dirname $(readlink -se "${BASH_SOURCE[0]}"))
CONFIG_FILE="$SELFDIR/server.conf"

function register_server() 
{
	if [ -z "$1" ] || is_server "$1"
	then
		return 1
	fi
	
	local server_id="$1" server_session="$2" server_config="$3"
	
	if [ -z "$server_session" ]
	then
		server_session=$server_id
	fi
	
	if [ -z "$server_config" ]
	then
		server_config="cfg/server-$server_id.cfg"
	fi
	
	SERVERS=(${SERVERS[@]} $server_id)
	
	eval "SERVER_PARAMS_$server_id=\"-sessionid $server_session +serverconfig $server_config\""
	eval "SERVER_SESSION_$server_id=\"$server_session\""
	eval "SERVER_CONFIG_$server_id=\"$server_config\""
}

function server_var()
{
	if is_server $2
	then
		local opt=SERVER_$1_$2
		echo ${!opt}
		return 0;
	fi
	return 1
}

function is_server()
{
	if [ -z "$1" ]
	then
		return 1;
	fi
	
	local e
	for e in ${SERVERS[@]}
	do 
		if [ "$e" = "$1" ]
		then
			return 0; 
		fi
	done
	return 1
}

function server_command()
{
	if is_server $1 
	then
		echo $GAME_CMD $GAME_PARAMS $(server_var PARAMS $1)
		return 0
	fi
	return 1
}

function ls_server()
{
	if is_server $1 
	then
		echo $1
		return 0
	fi
	return 1
}

function tmux_exec()
{
	if is_server $1 
	then
		tmux send-keys -t $1 "$2" Enter
		return 0
	fi
	return 1
}

function tmux_server()
{
	if is_server $1 
	then
		tmux attach -t $1
		return 0
	fi
	return 1
}

function tmux_irc()
{
	if is_server $1 
	then
		tmux attach -t $1-irc
		return 0
	fi
	return 1
}
function tmux_irc()
{
        if is_server $1 
        then
                tmux attach -t $1-irc
                return 0
        fi
        return 1
}

function server_quit()
{
	if is_server $1 
	then
		tmux_exec $1 quit
		return 0
	fi
	return 1
}

function server_start()
{
        if is_server $1
        then
                tmux_exec $1 "$(server_command $1)"
                return 0
        fi
        return 1
}

function server_restart()
{
        if is_server $1
        then
		tmux_exec $1 "help_say Server restarting"
		sleep 1
                server_quit $1
		sleep 1
		server_start $1
                return 0
        fi
        return 1
}

function foreach_server()
{
	servers="${@:2}"
	if [ -z "$2" ]
	then
		servers=${SERVERS[@]}
	fi
	for server in $servers
	do
		$1 $server
	done
}

function dump_config()
{
	for var in ${WRITABLE_VARS[@]}
	do
		echo "$var=\"${!var}\""
	done
	foreach_server dump_server
}

if [ -f $CONFIG_FILE ]
then
	source $CONFIG_FILE
else
	dump_config >$CONFIG_FILE
fi

command=ls_server

case $1 in
	inline)
		echo ${SERVERS[@]}
		exit 0;
	;;
	ls|list)
		command=ls_server
	;;
	cmd)
		command=server_command
	;;
	exec)
		servers="";
		adding_servers=true
		cmd=""
		for arg in ${@:2}
		do
			if is_server $arg && $adding_servers
			then
				servers="$servers $arg"
			else
				adding_servers=false
				cmd="$cmd $arg"
			fi
		done
		if [ -z "$servers" ]
		then
			servers=${SERVERS[@]}
		fi
		for server in $servers
       		do
			tmux_exec $server "$cmd"
	        done
		exit 0
	;;
	irc)
		command=tmux_irc
	;;
	view)
		command=tmux_server
	;;
	dump)
		command=dump_server
	;;
	register)
		register_server ${@:2}
		dump_config >$CONFIG_FILE
		exit 0
	;;
	quit)
		command=server_quit
	;;
	start)
		command=server_start
	;;
	restart)
		command=server_restart
	;;
	*)
		foreach_server ls_server 
		exit 0
	;;
esac

foreach_server $command "${@:2}"
