#!/bin/bash

#######################################################################
# Configuration variables
#######################################################################

SERVERS=()
GAME_CMD="xonotic"
GAME_PARAMS="-userdir ~/.xonotic -game data/pk3 -game data"
PK3_PUBLIC_DIR=
TEMPDIR=/tmp
WRITABLE_VARS=(GAME_CMD GAME_PARAMS TEXT_EDITOR PK3_PUBLIC_DIR TEMPDIR)
WRITABLE_SERVER_VARS=(sessionid serverconfig gamedir args)
SELFDIR=$(dirname $(readlink -se "${BASH_SOURCE[0]}"))
CONFIG_FILE="$SELFDIR/server.conf"
TEXT_EDITOR=sensible-editor
PLUGINDIR=$SELFDIR/plugins

declare -A WRITABLE_VARS_help
WRITABLE_VARS_help[GAME_CMD]="Command used to start the servers"
WRITABLE_VARS_help[GAME_PARAMS]="Base command line options to pass to the game engine when starting a server"
WRITABLE_VARS_help[TEXT_EDITOR]="The command used to edit text files (eg: mapinfo)"
WRITABLE_VARS_help[PK3_PUBLIC_DIR]="Path the directory used to store the pk3s available for download"
WRITABLE_VARS_help[TEMPDIR]="Path to a directory suitable to store temporary files"
declare -A WRITABLE_SERVER_VARS_help
WRITABLE_SERVER_VARS_help[sessionid]="Session id, defaults to \e[4mserver_id\e[0m"
WRITABLE_SERVER_VARS_help[serverconfig]="Server config file, defaults to is \"cfg/server-\e[4mserver_id\e[0m.cfg\"."
WRITABLE_SERVER_VARS_help[gamedir]="Server game data directory, defaults to \"data/\e[4mserver_id\e[0m\"."
WRITABLE_SERVER_VARS_help[args]="Additional command line arguments used when starting the server, default empty."

#######################################################################
# Server functions
#######################################################################

# @brief Register a server 
# @params server_id [option value]...
function register_server()
{
	# Filter out invalid characters from id
	local server_id=$( echo "$1" | sed "s/[^a-z0-9_]//g" )
	
	# Terminate if the server is already registered or we don't have a valid id
	if [ -z "$server_id" ] || is_server "$server_id"
	then
		return 1
	fi
	
	# Set default values
	declare -A tmp_serverarray
	tmp_serverarray[sessionid]="$server_id"
	tmp_serverarray[serverconfig]="cfg/server-$server_id.cfg"
	tmp_serverarray[gamedir]="data/$server_id"
	
	# parse settings
	shift
	while [ -n "$1" ]
	do
		tmp_serverarray["$1"]="$2"
		shift 2
	done
	
	#save server
	SERVERS=(${SERVERS[@]} $server_id)
	
	# Get userdir
	local userdir=$(echo "$GAME_CMD $GAME_PARAMS" | grep -Eo "\-userdir\s+\S+" | sed -r "s/-userdir\s+//")
	# No userdir => use default
	[ -z "$userdir" ] && userdir="~/.xonotic"
	# Ensure userdir is expanded
	eval "userdir=$userdir"
	# main_dir is a full path (ie: not relative to userdir)
	tmp_serverarray[main_dir]="$userdir/${tmp_serverarray[gamedir]}"
	# All command line arguments specific to this server
	tmp_serverarray[full_args]="-game ${tmp_serverarray[gamedir]} -sessionid ${tmp_serverarray[sessionid]} +serverconfig ${tmp_serverarray[serverconfig]} ${tmp_serverarray[args]}"
	
	# Copy to a global array
	local server_array="SERVER_$server_id"
	declare -Ag $server_array
	for key in "${!tmp_serverarray[@]}"
	do
		eval "$server_array[$key]=\"${tmp_serverarray[$key]}\""
	done
}

# @brief Get server variable
# @param $1 server id
# @param $1 variable name
#
# Variables that are always defined:
#	* main_dir      main data directory for the server
#	* gamedir       main_dir relative to -userdir
#	* full_args     command line arguments used for this particular server
#	* sessionid     session id
#	* serverconfig  server config file
#
function server_var()
{
	if is_server $1
	then
		local server_array="SERVER_$1"
		eval "echo \"\${${server_array}[$2]}\""
		return 0;
	fi
	return 1
}

# Whether $1 is a registered server
function is_server()
{
	if [ -z "$1" ]
	then
		return 1;
	fi
	
	local e
	for e in ${SERVERS[@]}
	do 
		if [ "$e" = "$1" ]
		then
			return 0; 
		fi
	done
	return 1
}

# Get full command line for the server $1
function server_command()
{
	if is_server $1 
	then
		echo $GAME_CMD $GAME_PARAMS $(server_var $1 full_args)
		return 0
	fi
	return 1
}

# Print $1 only if it's a server
function ls_server()
{
	if is_server $1 
	then
		echo $1
		return 0
	fi
	return 1
}

# Execute parameters $2 and following on the tmux window for the server $1
function tmux_exec()
{
	if is_server $1 
	then
		tmux send-keys -t $1 Enter "${@:2}" Enter
		return 0
	fi
	return 1
}

# Attach to the tmux window for the server $1
function tmux_server()
{
	if is_server $1 
	then
		tmux attach -t $1
		return 0
	fi
	return 1
}

# Quit the server $1 (keeps the tmux session open)
function server_quit()
{
	if is_server $1 
	then
		tmux_exec $1 quit
		return 0
	fi
	return 1
}

# Start the server $1 in its own tmux session
function server_start()
{
	if is_server $1
	then
		if ! tmux has -t $1 2>/dev/null
		then
			tmux new -d -s $1
		fi
		tmux_exec $1 "$(server_command $1)"
		
		return 0
	fi
	return 1
}

# Restart server $1
function server_restart()
{
	if is_server $1
	then
		tmux_exec $1 "say Server restarting"
		sleep 1
		server_quit $1
		sleep 1
		server_start $1
		return 0
	fi
	return 1
}

# @brief Call a function for each server
# @param $1 function
# @param $2... server ids. If empty, all servers
function foreach_server()
{
	servers="${@:2}"
	if [ -z "$2" ]
	then
		servers=${SERVERS[@]}
	fi
	for server in $servers
	do
		$1 $server
	done
}

# Print the current config to stdout
function dump_config()
{
	for var in ${WRITABLE_VARS[@]}
	do
		echo "$var=\"${!var}\""
	done
	
	foreach_server dump_server
	
	for plugin in ${plugins[*]}
	do
		echo load_plugin $plugin
	done
}

# Print the server registration command for $1
function dump_server()
{
	if is_server $1
	then
		echo -n "register_server $1 "
		declare -A tmp_serverarray
		eval $(set -o posix; set | grep SERVER_$1 | sed s/SERVER_$1/tmp_serverarray/ )
		
		for key in ${WRITABLE_SERVER_VARS[@]}
		do
			echo -n "$key \"${tmp_serverarray[$key]}\" "
		done
		echo
	fi
}

# @brief Get all the game directories for a given server
# @param $1 Server id
#
# It parses the command used to launch the server end extracts the game directories.
# Prints the full paths for them in reverse order 
# (so that the most relevant result is the first)
function get_game_dirs()
{
	local server=$1
	# Get userdir
	local userdir=$(server_command $server | grep -Eo "\-userdir\s+\S+" | sed -r "s/-userdir\s+//")
	# No userdir => use default
	[ -z "$userdir" ] && userdir="~/.xonotic"
	# Make sure ~ is expanded
	eval userdir=$userdir
	# Get all the search directories
	local gamedirs=$(server_command $server | grep -Eo "\-game\s+\S+" | sed -r "s/-game\s+//")
	
	#reverse the order
	local rev_gamedirs=""
	for dir in $gamedirs
	do
		rev_gamedirs="$dir $rev_gamedirs"
	done
	
	#print full paths
	for dir in $rev_gamedirs
	do
		echo "$userdir/$dir"
	done
}

# @brief Extracts end prints the name of the mapinfo file
# @param $1 server id
# @param $2 map name
#
# It will search (in all the game directories) for:
#	* a manually edited mapinfo, if found prints the file path
#	* an autogenerated mapinfo, if found copies it to the proper location and prints the resulting path
#	* a mapinfo in a pk3, if found it extracts it to the proper location and prints the resulting path
# If nothing is found it prints the path that can be used to create a new file
function extract_mapinfo()
{
	local server=$1
	local map=$2
	local game_dirs=$(get_game_dirs $server)
	
	
	for dir in $game_dirs
	do
		if [ -f "$dir/maps/$map.mapinfo" ]
		then
			echo "$dir/maps/$map.mapinfo"
			return
		fi
	done
	
	local maindir=$(server_var $server main_dir)
	eval "maindir=$maindir"
	mkdir -p "$maindir/maps"
	local destfile="$maindir/maps/$map.mapinfo"
	
	for dir in $game_dirs
	do
		if [ -f "$dir/data/maps/autogenerated/$map.mapinfo" ]
		then
			cp -T "$dir/data/maps/autogenerated/$map.mapinfo" "$destfile"
			echo "$destfile"
			return
		fi
	done
	
	#touch $destfile
	
	for dir in $game_dirs
	do
		for pk3 in $(ls $dir/*.pk3 2>/dev/null)
		do
			if zipinfo -1 "$pk3" | grep -iqF "maps/$map.mapinfo"
			then
				unzip -pC "$pk3" "maps/$map.mapinfo" >"$destfile"
				echo "$destfile"
				return
			fi
		done
	done
	
	echo $destfile
}


# Split function params interpreted as [server...] [commands...]
# get_params server1 server2 foo bar
#	servers = "server1 server2", cmd = "foo bar"
# get_params foo bar
#	servers = "all servers", cmd = "foo bar"
# get_params server1 -- server2 foo bar
#	servers = "server1", cmd = "server2 foo bar"
function get_params()
{
	servers="";
	adding_servers=true
	cmd=""
	# Get server... params...
	for arg in ${@}
	do
		if is_server $arg && $adding_servers
		then
			servers="$servers $arg"
		elif $adding_servers && [ "$arg" = "--" ]
		then
			adding_servers=false
		else
			adding_servers=false
			cmd="$cmd $arg"
		fi
	done
	# No server => all servers
	if [ -z "$servers" ]
	then
		servers=${SERVERS[@]}
	fi
}

#######################################################################
# PK3 functions
#######################################################################

# Check if $1 is a pk3 file name
function is_pk3()
{
	if [ ! -f "$1" ]
	then
		return 1 # not a file
	fi
	local ext=$(echo -n "$1" | tail -c 4)
	if [ "$ext" != ".pk3" ]
	then
		return 2 # wrong extension
	fi
	if ! zipinfo "$1" 1>/dev/null 2>&1
	then
		return 3 # not a zip archive
	fi
	
	return 0 # passed all test
}

#######################################################################
# Plugin functions
#######################################################################

# invoke $1 with the provided parameters
function plugin()
{
	filename="$PLUGINDIR/$1";
	if [ -f "$filename" -a -x "$filename" ]
	then
		for var in ${WRITABLE_VARS[@]}
		do
			export $var
		done
		export SERVER_NAMES=${SERVERS[@]}
		for server in ${SERVERS[@]}
		do
			declare -A tmp_serverarray
			eval $(set -o posix; set | grep SERVER_$server | sed s/SERVER_$server/tmp_serverarray/ )
			
			for key in ${WRITABLE_SERVER_VARS[@]}
			do
				export "SERVER_${server}_$key"="${tmp_serverarray[$key]}"
			done
		done
		"$filename" ${@:2}
	else
		echo "Invocation to an invalid plugin: $1"
	fi
}

# load all plugins
function load_plugins()
{
	plugins=()
	for plugin in $(find $PLUGINDIR -type f -executable -exec basename {} \;)
	do
		plugins+="$plugin"
	done
}

# load a single plugin ($1)
function load_plugin()
{
	if [ -f "$PLUGINDIR/$1" -a -x "$PLUGINDIR/$1" ]
	then
		plugins+="$1"
	else
		echo "Trying to load an invalid plugin: $1" 1>&2
		return 1
	fi
}

#######################################################################
# Command functions
#######################################################################
# 
# function cmd_*()
# {
# 	some code
# 	to simply apply a command to one or more servers:
# 	command=something; run=true;
# }
# function cmd_*_help()
# {
# 	echo "Some help about the command"
# }
# function cmd_*_synopsis()
# {
# 	echo "Command synopisi for help"
# }
#

function cmd_list()
{
	command=ls_server
	run=true
}
function cmd_list_help()
{
	echo "Print the name of each server, one per line"
}

function cmd_cmd()
{
	command=server_command
	run=true
}
function cmd_cmd_help()
{
	echo "Show server start command line"
}
function cmd_cmd_synopsis()
{
	echo "[\e[4mserver\e[0m]"
}

function cmd_exec()
{
	get_params ${@}
	
	for server in $servers
	do
		tmux_exec $server "$cmd"
	done
}
function cmd_exec_help()
{
	echo "Execute commands on multiple servers"
}
function cmd_exec_synopsis()
{
	echo "[\e[4mserver\e[0m...] [\e[4mcommand\e[0m...]"
}

function cmd_view()
{
	command=tmux_server
	run=true
}
function cmd_view_help()
{
	echo "Attach to server tmux session"
}
function cmd_view_synopsis()
{
	echo "\e[4mserver\e[0m"
}


function cmd_dumpconfig()
{
	dump_config
}
function cmd_dumpconfig_help()
{
	echo "Print the contents of a configuration file equivalent to the current settings"
}

function cmd_register()
{
	register_server ${@:2}
	dump_config >$CONFIG_FILE
}
function cmd_register_help()
{
	echo "Register a new server. (See below for details)"
}
function cmd_register_synopsis()
{
	echo "\e[4mserver-id\e[0m [\e[4moption\e[0m \e[4mvalue\e[0m]..."
}

function cmd_quit()
{
	command=server_quit
	run=true
}
function cmd_quit_help()
{
	echo "Quit a server"
}
function cmd_quit_synopsis()
{
	echo "[\e[4mserver\e[0m]"
}

function cmd_start()
{
	command=server_start
	run=true
}
function cmd_start_help()
{
	echo "Start a server"
}
function cmd_start_synopsis()
{
	echo "[\e[4mserver\e[0m]"
}

function cmd_restart()
{
	command=server_restart
	run=true
}
function cmd_restart_help()
{
	echo "Restart a server"
}
function cmd_restart_synopsis()
{
	echo "[\e[4mserver\e[0m]"
}

function cmd_help()
{
	
	echo -e "\e[1mNAME\e[0m"
	echo -e "\t$0 - Manage Xonotic servers"
	echo
	echo -e "\e[1mSYNOPSIS\e[0m"
	echo -e "\t\e[1m$0\e[0m \e[4mcommand\e[0m \e[4margument\e[0m..."
	echo
	echo -e "\e[1mCOMMANDS\e[0m"
	for cmd_name in ${commands[*]}
	do
		echo -en "\t\e[1m$cmd_name\e[0m "
		if [ "function" = "$(type -t cmd_${cmd_name}_synopsis)" ]
		then
			echo -e `cmd_${cmd_name}_synopsis`
		else
			echo
		fi
		if [ "function" = "$(type -t cmd_${cmd_name}_help)" ]
		then
			echo -e "\t\t`cmd_${cmd_name}_help`"
		else
			echo "\t\t(Undocumented)"
		fi
	done
	echo
	if [ "${#plugins}" -gt 0 ]
	then
		echo -e "\e[1mPLUGIN COMMANDS\e[0m"
		for plugin_name in ${plugins[*]}
		do
			echo -e "\t\e[1m$plugin_name\e[0m $(plugin $plugin_name synopsis)"
			echo -e "\t\t $(plugin $plugin_name help)"
		done
		echo
	fi
	echo -e "\e[1mCONFIGURATION\e[0m"
	echo -e "\tThe configuration file is \e[1m$CONFIG_FILE\e[0m."
	echo -e "\tYou can use it to override global options (see below) and register servers."
	echo
	echo -e "\e[1mGlobal Options\e[0m"
	for var in ${WRITABLE_VARS[@]}
	do
		echo -e "\t\e[1m$var\e[0m = \"${!var}\""
		echo -e "\t\t${WRITABLE_VARS_help[$var]}"
	done
	echo
	echo -e "\e[1mRegistering Servers\e[0m"
	echo -e "\t\e[1mregister_server\e[0m \e[4mserver_id\e[0m [\e[4moption\e[0m \e[4mvalue\e[0m]]..."
	echo -e "\t\tRegisters a game server with the given id."
	echo
	echo -e "\e[1mServer Options\e[0m"
	for var in ${WRITABLE_SERVER_VARS[@]}
	do
		echo -e "\t\e[1m$var\e[0m"
		echo -e "\t\t${WRITABLE_SERVER_VARS_help[$var]}"
	done
	echo
	echo -e "\e[1mPLUGINS\e[0m"
	echo -e "\tPlugins can be created in the directory"
	echo -e "\t\e[4m$PLUGINDIR\e[0m."
	echo -e "\tA plugin must be an executable file, the script will use their file name"
	echo -e "\tas command name so a simple word without extension is reccommended for this."
	echo -e "\tA plugin is required to output a synopsis (single line without newline)"
	echo -e "\twhen invoked with the single argument \e[1msynopsis\e[0m."
	echo -e "\tSimilarly, it should output some description when called with \e[1mhelp\e[0m."
	echo -e "\tOn a normal execution, plugins will receive the arguments as invoked by the user."
	echo -e "\tTo load all plugins call the command \e[1mload_plugins\e[0m in the config file."
	echo -e "\tTo load a specific plugin call \e[1mload_plugin\e[0m \e[4mplugin_name\e[0m."
	echo
	echo -e "\e[1mEnvironment Variables\e[0m"
	echo -e "\tPlugins have can read from the environment:"
	echo -e "\t\t * All the writable global options (see above)"
	echo -e "\t\t * The variable \e[1mSERVER_NAMES\e[0m, containing the server names"
	echo -e "\t\t * All the writable server options as \e[1mSERVER_\e[22;4mserver\e[24;1m_\e[22;4moption\e[0m"
	echo
	
}
function cmd_help_help()
{
	echo "Show this help"
}

function cmd_autocomplete()
{
	for cmd_name in ${commands[*]}
	do
		if [ "$1" = "$cmd_name" ]
		then
			echo ${SERVERS[@]}
			return 0
		fi
	done
	
	echo ${commands[*]} ${plugins[*]}
}
function cmd_autocomplete_help()
{
	echo "Show autocompletion suggestions"
}
function cmd_autocomplete_synopsis()
{
	echo
}

function cmd_config()
{
	get_params ${@}
	
	for server in $servers
	do
		for dir in $(get_game_dirs $server)
		do
			params="--data=$dir $params"
		done
		# Call the python script which does the job
		$SELFDIR/parse-cfg $params $(server_var $server serverconfig) $cmd
	done
}
function cmd_config_help()
{
	echo "View server config."
	echo "\t\tUndefined cvars and alias will result to have the value \"\" "
	echo "\t\twhich may differ from the actual value."
	echo "\t\tOption description:"
	echo "\t\t\e[1m--cvar\e[0m"
	echo "\t\t\tList all the defined cvars"
	echo "\t\t\e[1m--alias\e[0m"
	echo "\t\t\tList all the defined aliases"
	echo "\t\t\e[1m--cvar=\e[22;4mcvar-name\e[0m"
	echo "\t\t\tShow the value of the given cvar"
	echo "\t\t\e[1m--alias=\e[22;4malias-name\e[0m"
	echo "\t\t\tShow the value of the given alias"
}
function cmd_config_synopsis()
{
	echo "[\e[4mserver\e[0m...] [\e[1m--cvar\e[0m[\e[1m=\e[22;4mcvar-name\e[0m]|\e[1m--alias\e[0m[\e[1m=\e[22;4malias-name\e[0m]]..."
}

function cmd_rcon()
{
	get_params ${@}
	
	for server in $servers
	do
		config=$(cmd_config $server --cvar=rcon_password --cvar=rcon_secure --cvar=port)
		rcon_password=$(echo $config | grep -Eo 'rcon_password \"?[^" ]+\"?' | sed -r 's/rcon_password "?([^"]+)"?/\1/')
		rcon_secure=$(echo $config | grep -Eo 'rcon_secure \"?[^" ]+\"?'| sed 's/rcon_secure //')
		port=$(echo $config | grep -Eo 'port \"?[^" ]+\"?' | sed 's/port //')
		$SELFDIR/rcon "-pw=$rcon_password" "-p$port" "-s=$rcon_secure" -c "$cmd"
	done
}
function cmd_rcon_help()
{
	echo "Execute commands on multiple servers."
	echo "\t\tUnlike \e[1mexec\e[0m this will print the result"
}
function cmd_rcon_synopsis()
{
	echo "[\e[4mserver\e[0m...] [\e[4mcommand\e[0m...]"
}

function cmd_ls()
{
	server=$1
	search=${@:2}
	search_re=$(echo "$search" | sed -r -e 's/([.(){}[\]+?$^\\])/\\\1/g' -e 's/\*/.*/g')
	
	for dir in $(get_game_dirs $server)
	do
		if [ -d "$dir" ]
		then
			find "$dir" -path "$dir/$search" 2>/dev/null | sed -r "s~^$dir/~~"
			for pk3 in $(ls $dir/*.pk3 2>/dev/null)
			do
				zipinfo -1 $pk3 | grep -E -e "^$search_re$"
			done
		fi
	done
	
}
function cmd_ls_help()
{
	echo "List files matching \e[4mpattern\e[0m for the given server"
}
function cmd_ls_synopsis()
{
	echo "\e[4mserver\e[0m \e[4mpattern\e[0m"
}


function cmd_maps_get_mapinfo()
{
	for dir in $gamedirs
	do
		if [ -f "$dir/maps/$map.mapinfo" ]
		then
			cat "$dir/maps/$map.mapinfo"
			return
		elif [ -f "$dir/maps/autogenerated/$map.mapinfo" ]
		then
			cat "$dir/maps/autogenerated/$map.mapinfo"
			return
		else
			for pk3 in $(ls $dir/*.pk3 2>/dev/null)
			do
				if zipinfo -1 "$pk3" | grep -iqF "maps/$map.mapinfo"
				then
					unzip -pC "$pk3" "maps/$map.mapinfo"
					return
				fi
			done
		fi
	done 
}
function cmd_maps_check_mapinfo()
{
	if echo "$mapinfo" | grep -qE "^(game)?type\s*$1"
	then
		return 0
	elif [ -n "${obsolete_gametypes[$1]}" ] 
	then
		cmd_maps_check_mapinfo ${obsolete_gametypes[$1]}
	else
		return 1
	fi
}
function cmd_maps()
{
	server=$1
	invsearch=false
	search=$2
	if [ "$2" = "not" -o "$2" = "!" ]
	then
		invsearch=true
		search=$3
	fi
	
	all_maps=$(cmd_ls $server '*.bsp' | grep -iE '^maps/' | sed -r 's~maps/(.*)\.bsp~\1~i')
	
	if [ -z "$search" ]
	then
		echo "$all_maps"
	else
		gamedirs=$(get_game_dirs $server)
		
		declare -A obsolete_gametypes
		obsolete_gametypes[nb]=nexball
		obsolete_gametypes[ft]=freezetag
		obsolete_gametypes[ka]=keepaway
		obsolete_gametypes[inv]=invasion
	
		for map in $all_maps
		do
			mapinfo=$(cmd_maps_get_mapinfo $server $map)
			if cmd_maps_check_mapinfo $search
			then
				! $invsearch && echo $map
			elif $invsearch
			then
				echo $map
			fi
		done
	fi
}
function cmd_maps_help()
{
	echo "List maps in the server."
	echo "\t\tWhen \e[4mgametype\e[0m is specified, list only the maps with that gametype in the mapinfo."
	echo "\t\tWhen \e[1mnot\e[0m is specified, list only the maps without that gametype in the mapinfo."
}
function cmd_maps_synopsis()
{
	echo "\e[4mserver\e[0m [\e[1mnot\e[0m] \e[4mgametype\e[0m"
}

function cmd_mapinfo()
{
	$TEXT_EDITOR $(extract_mapinfo ${@})
}
function cmd_mapinfo_help()
{
	echo "Edit the mapinfo file for the given map."
	echo "\t\tIf that mapinfo file is autogenerated or in the pk3"
	echo "\t\tit's copied to the proper location first."
}
function cmd_mapinfo_synopsis()
{
	echo "\e[4mserver\e[0m \e[4mmap\e[0m"
}

function cmd_install()
{
	get_params ${@}

	local filename=$(echo "$cmd" | sed -r "s/^ //")
	local istemp=false
	
	
	
	if [ -f "$filename" ]
	then
		echo "Installing local file"
	else
		local local=$TEMPDIR/$(basename "$filename")
		if ! wget -O "$local" "$filename"
		then
			echo "Could not download $filename"
			return 1
		fi
		filename="$local"
	fi
	
	if ! is_pk3 "$filename"
	then
		echo "Not a PK3 file: $filename"
		$istemp && rm "$filename"
		return 2
	fi
	
	if [ -d "$PK3_PUBLIC_DIR" ]
	then
		cp -n "$filename" "$PK3_PUBLIC_DIR"
	fi
	
	for server in $servers
	do
		local serverdir=$(server_var $server main_dir)
		mkdir -p "$serverdir"
		cp -n "$filename" "$serverdir"
		tmux_exec $server fs_rescan
	done
	
	$istemp && rm "$filename"
}
function cmd_install_help()
{
	echo "Install a local or a remote pk3."
}
function cmd_install_synopsis()
{
	echo "[\e[4mserver\e[0m...] \e[4mfile\e[0m|\e[4murl\e[0m"
}
function cmd_plugins()
{
	
	for maybe_plugin in $(find $PLUGINDIR -type f -executable -exec basename {} \;)
	do
		for plugin in ${plugins[*]}
		do
			if [ "$plugin" = "$maybe_plugin" ]
			then
				echo -en "\e[32m$plugin ";
				continue 2
			fi
		done
		echo -en "\e[31m$maybe_plugin ";
	done
	echo -e "\e[0m"
}
function cmd_plugins_help()
{
	echo "List available and installed plugins."
}

#######################################################################
# Script code
#######################################################################

#load config file to override variables

plugins=()
if [ -f $CONFIG_FILE ]
then
	source $CONFIG_FILE
else
	load_plugins
	dump_config >$CONFIG_FILE
fi

commands=(help autocomplete ls list cmd exec view dumpconfig register quit start \
	restart config rcon maps mapinfo install plugins)

command=ls_server
run=false

for plugin in ${plugins[*]}
do
	if [ "$1" = "$plugin" ]
	then
		plugin "$plugin" ${@:2}
		exit
	fi
done
		
for cmd_name in ${commands[*]}
do
	if [ "$1" = "$cmd_name" ] 
	then
		cmd_$1 ${@:2}
	fi
done

if $run
then
	foreach_server $command "${@:2}"
fi