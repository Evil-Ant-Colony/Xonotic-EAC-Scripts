#!/bin/bash

FIND_MAP_SEARCH_FUNCTION=search_pk3_fallback
FIND_MAP_OUT_FUNCTION=basename
FIND_MAP_SHOW_SUMMARY=false

SELFDIR=$(dirname $(readlink -se "${BASH_SOURCE[0]}"))
source $SELFDIR/source-pk3-utils.sh

SEARCH_DIR=$XONOTIC_DATA_DIR

# list all the pk3 to be searched
function list_pk3()
{
	ls $SEARCH_DIR/*.pk3
}

# Search for a match in the pk3 name
function search_pk3_name()
{
	list_pk3 | grep $1
}

# Search for a match in all the pk3 contents
function search_pk3_contents()
{
	for pk3 in $(list_pk3)
	do
		if pk3_files $pk3 | grep -q "maps/.*$1.*\.bsp"
		then
			echo $pk3
		fi
	done
}

# Search first in pk3 names, then (if nothing maches) in pk3 contents
function search_pk3_fallback()
{
	found=$(search_pk3_name $1)
	if [ -z "$found" ]
	then
		search_pk3_contents $1
	else
		echo $found
	fi
}

function show_help()
{
	echo -e "\e[1mNAME\e[0m"
	echo -e "\t$0 - Search maps"
	echo
	echo -e "\e[1mSYNOPSIS\e[0m"
	echo -e "\t\e[1m$0\e[0m [\e[4moptions\e[0m...] \e[4mterm\e[0m..."
	echo -e "\t\e[1m$0\e[0m \e[1mhelp\e[0m|\e[1m-h\e[0m|\e[1m--help\e[0m"
	echo
	echo -e "\e[1mOPTIONS\e[0m"
	echo -e "\e[1m--search-mode=\e[22;4mmode\e[0m"
	echo -e "\tHow to search for a match. Possible values:"
	echo -e "\t *:\e[1mname\e[0m:Only search pk3 file names
\t *:\e[1mcontents\e[0m:Search for a bsp inside the pk3
\t *:\e[1mboth\e[0m:Search in the file names, if this fails, in the contents" | column -t -c 3 -s ":"
	echo -e "\e[1m--dir=\e[22;4mdirectory\e[0m"
	echo -e "\tSearch in \e[4mdirectory\e[0m (default is $XONOTIC_DATA_DIR)"
	echo -e "\e[1m--summary\e[0m|\e[1m-s\e[0m"
	echo -e "\tEnable printing a summary (the total number of matched maps) at the end (default off)"
	echo -e "\e[1m--no-summary\e[0m"
	echo -e "\tDisable the summary"
	echo
	echo -e "\e[1mACTIONS\e[0m"
	echo -e "\e[1m--list-short\e[0m|\e[1m-ls\e[0m"
	echo -e "\tDisplay pk3 names (default behaviour)"
	echo -e "\e[1m--list\e[0m|\e[1m-l\e[0m"
	echo -e "\tDisplay full path for the pk3 files"
	echo -e "\e[1m--move=\e[22;4mdestination\e[0m"
	echo -e "\tMove the matched files to \e[4mdestination\e[0m (relative to \$MOVETO_ROOT)"
	echo -e "\e[1m--cmd=\e[22;4mcommand\e[0m"
	echo -e "\tApply \e[4mcommand\e[0m to every matched file"
	echo -e "\e[1m--quiet\e[0m|\e[1m-q\e[0m"
	echo -e "\tDon't do anything with the found maps"
	echo -e "\e[1mEXIT VALUE\e[0m"
	echo -e "\tzero if it has found some map, non-zero otherwise"
	echo
}


function action_move_to()
{
	pk3=$2
	dest=$MOVETO_ROOT/$1
	pk3base=`basename $pk3`
	if [ ! -d $dest ]
	then
		mkdir -p $dest
	fi
	echo "$pk3base => $dest"
	mv $pk3 $dest
	for d in ${ALL_PK3_DIRS[@]}
	do
		rm -f $d/$pk3base
	done
}

function action_noop()
{
	return 0
}

declare -i found_count
let found_count=0

for arg in $@
do
	case $arg in
		
		help|--help|-h)
			show_help
			;;
		--search-mode=*)
			case ${arg#*=} in
				name)
					FIND_MAP_SEARCH_FUNCTION=search_pk3_name
					;;
				contents)
					FIND_MAP_SEARCH_FUNCTION=search_pk3_contents
					;;
				both)
					FIND_MAP_SEARCH_FUNCTION=search_pk3_fallback
					;;
# 				*)
# 					echo "Unknown search mode: ${arg#*=}"
# 					;;
			esac
			;;
		--summary|-s)
			FIND_MAP_SHOW_SUMMARY=true
			;;
		--no-summary)
			FIND_MAP_SHOW_SUMMARY=false
			;;
		--quiet|-q)
			FIND_MAP_OUT_FUNCTION=action_noop
			;;
		--list|-l)
			FIND_MAP_OUT_FUNCTION=echo
			;;
		--list-short|-ls)
			FIND_MAP_OUT_FUNCTION=basename
			;;
		--move=*)
			FIND_MAP_OUT_FUNCTION="action_move_to ${arg#*=} "
			;;
		--cmd=*)
			FIND_MAP_OUT_FUNCTION=${arg#*=}
			;;
		--dir=*)
			eval SEARCH_DIR=${arg#*=}
			;;
		*)
			for map in $($FIND_MAP_SEARCH_FUNCTION $arg)
			do
				let found_count++
				$FIND_MAP_OUT_FUNCTION $map
			done
			;;
	esac
done

if $FIND_MAP_SHOW_SUMMARY
then
	echo "Found $found_count maps"
fi


[ $found_count -gt 0 ]



